map_to_master_table(results_object = results$results, filename = "./test2.csv")
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./test2.csv")
direct_case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
map_to_result(data = data,
dependent.var = "crop_production_challenges",
case = direct_case,
weighting = weights,
questionnaire = questionnaire)
lookup <- unique(sampling_frame)
data_ <- merge(lookup, data, by='strata.names')
strata_design <- svydesign(ids = ~1, strata = ~strata.names, fpc = ~population, data = data_)
svymean(~crop_production_challenges.insecurity, strata_design,na.rm=T)
hype_design <- map_to_design(data = data, weighting_function = weights)
svymean(~crop_production_challenges.insecurity, hype_design,na.rm=T)
weights(data) %>% write.csv("./output/weightes.csv")
svymean(~agricultural_activities_prior2011.crop_production_activity, strata_design,na.rm=T)
svymean(~agricultural_activities_prior2011.livestock_activity, strata_design,na.rm=T)
install.packages("srvyr ")
install.packages("srvyr")
install.packages("srvyr")
library(srvyr)
strat_design_srvyr <- data_ %>%
as_survey_design(1, strata = strata.names, fpc = population)
strat_design_srvyr %>%
summarize(a = survey_mean(agricultural_activities_prior2011.livestock_activity, vartype = "ci"))
strat_design_srvyr %>%
summarize(a = survey_mean(agricultural_activities_prior2011.livestock_activity, vartype = "ci"),na.rm=T)
summarize(a = survey_mean(agricultural_activities_prior2011.livestock_activity, vartype = "ci",na.rm=T)
strat_design_srvyr %>%
summarize(a = survey_mean(agricultural_activities_prior2011.livestock_activity, vartype = "ci",na.rm=T))
percent_with_confints_select_one_groups
hypegrammaR::percent_with_confints_select_one_groups
hypegrammaR::percent_with_confints_select_multiple
data_$weights <- weights(data)
strat_design_srvyr <- data_ %>%
as_survey_design(1, strata = strata.names, fpc = population, weight = weights)
strat_design_srvyr %>%
summarize(a = survey_mean(agricultural_activities_prior2011.livestock_activity, vartype = "ci",na.rm=T))
svymean(~agricultural_activities_prior2011.livestock_activity, strata_design,na.rm=T)
strat_design_srvyr <- data_ %>%
as_survey_design(1, strata = strata.names, fpc = population)
strat_design_srvyr %>%
summarize(a = survey_mean(agricultural_activities_prior2011.livestock_activity, vartype = "ci",na.rm=T))
svymean(~agricultural_activities_prior2011.livestock_activity, strata_design,na.rm=T)
library(survey)
strata_design <- svydesign(ids = ~1, strata = ~strata.names, fpc = ~population, data = data_)
svymean(~agricultural_activities_prior2011.livestock_activity, strata_design,na.rm=T)
strata_design <- svydesign(ids = ~1, strata = ~strata.names, fpc = ~population, data = data_, weights = ~weights)
svymean(~agricultural_activities_prior2011.livestock_activity, strata_design,na.rm=T)
rm(list = ls())
library(hypegrammaR)
questions <- read.csv("./input/survey.csv", stringsAsFactors = F)
choices <- read.csv("./input/choices.csv", stringsAsFactors = F)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan_overall.csv")
kobostandards::check_input(data = data, questions = questions, choices = choices ,samplingframe = sampling_frame,
analysisplan = analysisplan) %>% write.csv("./output/check_input.csv")
data$blankets
"hh_owns_it_no_need_more" %in% data$blankets
library(stringr)
str_replace(data$blankets, "hh_owns_enough")
(data$blankets, "hh_owns_it_no_need_more","hh_owns_enough")
data$blankets
gsub("hh_owns_it_no_need_more","hh_owns_enough",data$blankets)
data$blankets <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$blankets)
"hh_owns_it_no_need_more" %in% data$blankets
data$clothing_cold_weather <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$clothing_cold_weather)
data$sold_nonproductive_hh_assets
data <- load_data(file = "./input/data.csv")
data$blankets <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$blankets)
data$clothing_cold_weather <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$clothing_cold_weather)
data$heating_systems <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$heating_systems)
data$mosquito_nets <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$mosquito_nets)
data$smart_phone <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$smart_phone)
data$tv <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$tv)
data$desktop_laptop_computer <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$desktop_laptop_computer)
data$sold_nonproductive_hh_assets <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$sold_nonproductive_hh_assets)
data$sold_productive_hh_assets <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$sold_productive_hh_assets)
data$spent_savings <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$spent_savings)
data$borrowed_money <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$borrowed_money)
data$borrowed_purchased_oncredit_food <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$borrowed_purchased_oncredit_food)
data$reduced_expenditures_essential_nfi <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$reduced_expenditures_essential_nfi)
data$reduced_expenditures_health_education <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$reduced_expenditures_health_education)
data$child_dropped_school <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$child_dropped_school)
data$delayed_skipped_rent <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$delayed_skipped_rent)
data$begging <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$begging)
data$took_additional_job <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$took_additional_job)
data$adult_accepting_degrading_illegal_work <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$adult_accepting_degrading_illegal_work)
data$minor_accepting_degrading_illegal_work <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$minor_accepting_degrading_illegal_work)
data$child_marriage <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$child_marriage)
data$other_cash_coping_mechanism <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$other_cash_coping_mechanism)
data$chronicdisease_services_unavailable <- gsub(".specialized_consultation_unavailable","specialized_consultation_unavailable",data$chronicdisease_services_unavailable)
data$hh_nearfutur_intention <- gsub("settke elsewhere_within_libya","settle_elsewhere_within_libya",data$hh_nearfutur_intention)
kobostandards::check_input(data = data, questions = questions, choices = choices ,samplingframe = sampling_frame,
analysisplan = analysisplan) %>% write.csv("./output/check_input.csv")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
analysisplan <- load_analysisplan(file = "./input/analysisplan_overall.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire,
labeled = T
)
View(results)
map_to_master_table(results_object = labeled_results, filename = "./output/test.csv")
map_to_master_table(results_object = results, filename = "./output/test.csv")
map_to_master_table(results_object = results, filename = "./output/test.csv", questionnaire = questionnaire)
results$results<-lapply(results$results,function(x){x$summary.statistic<-as.data.frame(x$summary.statistic,stringsAsFactors=F);x})
map_to_master_table(results_object = results, filename = "./output/test.csv")
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/test.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire
)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/test.csv")
analysisplan <- load_analysisplan(file = "./input/analysisplan_overall.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire
)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/overall.csv")
analysisplan <- load_analysisplan(file = "./input/analysisplan_repeat.var_overall.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire
)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/overall_split_mantika.csv")
View(results)
data["not_hoh_ability_toanswer"=="yes",]
vecteur <- c("abc", "ab", "acc", "ght", "htg", "bbb")
vecteur <-gsub("hh_owns_it_no_need_more","hh_owns_enough",vecteur)
vecteur
vecteur <-gsub("a","hh_owns_enough",vecteur)
vecteur
vecteur <- c("abc", "ab", "acc", "ght", "htg", "bbb")
vecteur <-gsub("a","hh_owns_enough",vecteur, fixed = T)
vecteur <- c("abc", "ab", "acc", "ght", "htg", "bbb")
vecteur <-grep("a","hh_owns_enough",vecteur, fixed = T)
checking <- read.csv("./output/check_input.csv")
apply(checking, 1,function(x){
data[x["affected_varables"]] <- gsub("hh_owns_it_no_need_more","hh_owns_enough",data[x["affected_varables"]])
}
)
checking["affected_variable"]
checking["affected_variables"]
apply(checking, 1,function(x){
data[x["affected_variables"]] <- gsub("hh_owns_it_no_need_more","hh_owns_enough",data[x["affected_varables"]])
}
)
checking["affected_variables"]
checking["affected_variables"]
as.character(checking["affected_variables"])
as.character(checking["affected_variables"])
apply(checking, 1,function(x){
data[as.character(x["affected_variables"])] <- gsub("hh_owns_it_no_need_more","hh_owns_enough",data[x["affected_varables"]])
}
)
apply(checking, 1,function(x){
data[,as.character(x["affected_variables"])] <- gsub("hh_owns_it_no_need_more","hh_owns_enough",data[x["affected_varables"]])
}
)
apply(checking, 1,function(x){
data[,as.character(x["affected_variables"])] <- gsub("hh_owns_it_no_need_more","hh_owns_enough",data[x["affected_varables"]])
}
)
data[,as.character(checking["affected_variables"])]
checking["affected_variables"]
as.character(checking["affected_variables"]
data[,"hi_tripoli"]
source("./functions/map_to_design.R")
source("./functions/analysisplan_factory.R")
source("./functions/summary_statistics.R")
source("./functions/map_to_case.R")
source("./functions/map_to_result.R")
source("./functions/map_to_summary_statistic.R")
source("./functions/apply_analysis_plan.R")
lookup <- unique(sampling_frame)
data <- merge(lookup, data, by='strata.names')
data$weights <- weights(data)
direct_case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
weighting = weights,
questionnaire = questionnaire)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_result.R')
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/apply_analysis_plan.R')
direct_case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
weighting = weights,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population"
)
View(map_to_design)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
weighting = weights,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population"
)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_result.R')
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_result.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
weighting = weights,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
weighting = weights,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
weighting = weights,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population"
)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
debugonce(map_to_result)
case_result<- map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
options(survey.lonely.psu = "remove")
# put the relevant input parameters in a list so we can attach them to the output:
parameters<-list(
dependent.var = dependent.var,
independent.var = independent.var,
cluster.variable.name=cluster.variable.name,
weighted=is.function(weighting),
case=case
)
is.null(weighting)
!is.function(weighting)
!is_valid_case_string(case)
design <- map_to_design(data = data,
cluster_variable_name = NULL,
weighting_function = NULL,
strata.variable.name =strata.variable.name,
population.variable.name =population.variable.name)
debugonce(map_to_design)
design <- map_to_design(data = data,
cluster_variable_name = NULL,
weighting_function = NULL,
strata.variable.name =strata.variable.name,
population.variable.name =population.variable.name)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_result.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
strata_design <- svydesign(ids = ~1, strata = ~strata.names, fpc = ~population, data = data, weights = ~weights)
svymean(~hoh, strata_design,na.rm=T)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_design.R')
perso_design <- map_to_design(data = data, strata.variable.name = "strata.names", population.variable.name = "population", weights.name = "weights")
perso_design
strata_design
svymean(~hoh, perso_design,na.rm=T)
svymean(~hoh, strata_design,na.rm=T)
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
map_to_design
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/functions/map_to_result.R')
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
svymean(~hoh, perso_design,na.rm=T)
direct_case
strata_design <- svydesign(ids = ~1, strata = ~strata.names, fpc = ~population, data = data)
svymean(~hoh, strata_design,na.rm=T)
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
svymean(~hoh, strata_design,na.rm=T)
svymean(~hoh, perso_design,na.rm=T)
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
rm(map_to_design)
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
strata.variable.name = "strata.names",
population.variable.name = "population",
weights = "weights"
)
library(srvyr)
dstrata <- data %>% as_survey_design(strata= strata.names, weights = weights)
dstrata %>% summarise(med=survey_median(gvt_salary, vartype = c("ci")))
dstrata %>% summarise(med=survey_median(gvt_salary, vartype = c("ci"), na.rm=T))
dstrata %>% summarise(med=survey_median(gvt_salary, vartype = c("se","ci"), na.rm=T))
dstrata %>% summarise(med=survey_median(gvt_salary, vartype = c("se","ci"), na.rm=T, level=0.95))
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T)
strata_design <- svydesign(ids = ~1, strata = ~strata.names, fpc = ~population, data = data, weights=~weights)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T)
svyquantile(~gvt_salary, design=strata_design, quantiles=0.5, na.rm=TRUE, ci=T)
svyquantile(~gvt_salary, design=strata_design, quantiles=0.5, na.rm=TRUE,)
analysisplan2 <- analysisplan_expand_repeat(analysisplan = analysisplan,data = data, se=T)
svyquantile(~gvt_salary, design=strata_design, quantiles=0.5, na.rm=TRUE,se=T)
attr(x = svyquantile(~gvt_salary, design=strata_design, quantiles=0.5, na.rm=TRUE),which = "SE")
attr(x = svyquantile(~gvt_salary, design=strata_design, quantiles=0.5, na.rm=TRUE, ci=T),which = "SE")
dstrata %>% summarise(med=survey_median(gvt_salary, vartype = c("se","ci"), na.rm=T, level=0.95))
devtools::install_github("hedibmustapha/hypegrammaR")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS"=TRUE)
devtools::install_github("hedibmustapha/hypegrammaR")
library(hypegrammaR)
rm(list = ls())
library(hypegrammaR)
library(parallel)
library(dplyr)
questions <- read.csv("./input/survey.csv", stringsAsFactors = F)
choices <- read.csv("./input/choices.csv", stringsAsFactors = F)
data <- load_data(file = "./input/data.csv")
data$blankets <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$blankets)
data$clothing_cold_weather <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$clothing_cold_weather)
data$heating_systems <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$heating_systems)
data$mosquito_nets <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$mosquito_nets)
data$smart_phone <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$smart_phone)
data$tv <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$tv)
data$desktop_laptop_computer <-gsub("hh_owns_it_no_need_more","hh_owns_enough",data$desktop_laptop_computer)
data$sold_nonproductive_hh_assets <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$sold_nonproductive_hh_assets)
data$sold_productive_hh_assets <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$sold_productive_hh_assets)
data$spent_savings <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$spent_savings)
data$borrowed_money <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$borrowed_money)
data$reduced_expenditures_essential_nfi <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$reduced_expenditures_essential_nfi)
data$borrowed_purchased_oncredit_food <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$borrowed_purchased_oncredit_food)
data$reduced_expenditures_health_education <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$reduced_expenditures_health_education)
data$delayed_skipped_rent <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$delayed_skipped_rent)
data$child_dropped_school <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$child_dropped_school)
data$begging <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$begging)
data$took_additional_job <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$took_additional_job)
data$adult_accepting_degrading_illegal_work <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$adult_accepting_degrading_illegal_work)
data$minor_accepting_degrading_illegal_work <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$minor_accepting_degrading_illegal_work)
data$child_marriage <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$child_marriage)
data$other_cash_coping_mechanism <- gsub("noneed_to use_this_coping_strategy","noneed_to_use_this_coping_strategy",data$other_cash_coping_mechanism)
data$chronicdisease_services_unavailable <- gsub(".specialized_consultation_unavailable","specialized_consultation_unavailable",data$chronicdisease_services_unavailable)
data$hh_nearfutur_intention <- gsub("settke elsewhere_within_libya","settle_elsewhere_within_libya",data$hh_nearfutur_intention)
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan_overall.csv")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
map_to_case
map_to_summary_statistic
remove.packages("hypegrammaR")
devtools::install_github("hedibmustapha/hypegrammaR")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS"=TRUE)
devtools::install_github("hedibmustapha/hypegrammaR")
library(hypegrammaR)
map_to_case
median_direct_case <- map_to_case(hypothesis.type = "direct_reporting_median",
dependent.var.type = "numerical")
map_to_result(data = data,
dependent.var = "gvt_salary",
case = median_direct_case,
questionnaire = questionnaire,
weighting = weights
)
direct_case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
map_to_result(data = data,
dependent.var = "hoh",
case = median_direct,
questionnaire = questionnaire,
weighting = weights
)
map_to_result(data = data,
dependent.var = "hoh",
case = direct_case,
questionnaire = questionnaire,
weighting = weights
)
group_diff_case <- map_to_case(hypothesis.type = "group_difference_median",
dependent.var.type = "numerical",
independent.var.type = "categorical")
map_to_result(data = data,
dependent.var = "gvt_salary",
independent.var = "displacement_status",
case = group_diff_case,
weighting = weights,
questionnaire = questionnaire)
library(srvyr)
data$weights <- weights(data)
dstrata <- data %>% as_survey_design(strata= strata.names, weights = weights)
dstrata %>% group_by(displacement_status) %>% summarise(med=survey_median(gvt_salary, vartype = c("se","ci"), na.rm=T, level=0.95))
dstrata %>% group_by(displacement_status) %>% summarise(med=survey_median(own_business_income, vartype = c("se","ci"), na.rm=T, level=0.95))
map_to_result(data = data,
dependent.var = "own_business_income",
independent.var = "displacement_status",
case = group_diff_case,
weighting = weights,
questionnaire = questionnaire)
analysisplan <- load_analysisplan(file = "./input/analysisplan_medians.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire
)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/overall_medians.csv")
analysisplan <- load_analysisplan(file = "./input/analysisplan_medians.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire
)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/medians_split.csv")
dstrata %>% group_by(displacement_status) %>% summarise(med=survey_median(own_business_income, vartype = c("se","ci"), na.rm=T, level=0.95))
colnames(dstrata %>% group_by(displacement_status) %>% summarise(med=survey_median(own_business_income, vartype = c("se","ci"), na.rm=T, level=0.95)))
