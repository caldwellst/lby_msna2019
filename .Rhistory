devtools::install_github("ellieallien/hypegrammaR",build_opts = c())
devtools::install_github("ellieallien/hypegrammaR",build_opts = c(), force = T)
browseVignettes("hypegrammaR")
devtools::install_github("mabafaba/kobostandards")
browseVignettes("kobostandards")
devtools::install_github("mabafaba/kobostandards", force = T)
browseVignettes("kobostandards")
library(hypegrammaR)
getwd()
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
library(kobostandards)
library(tibble)
View(questionnaire)
View(questionnaire)
kobostandards::check_input(data = data, questions = questionnaire, choices = "./input/choices.csv" ,samplingframe = sampling_frame,
analysisplan = analysisplan)
check_input <-kobostandards::check_input(data = data, questions = questionnaire, choices = "./input/choices.csv" ,samplingframe = sampling_frame,
analysisplan = analysisplan)
View(check_input)
kobostandards::check_input(data = data, questions = questionnaire, choices = "./input/choices.csv" ,samplingframe = sampling_frame,
analysisplan = analysisplan) %>% write.csv("check_input.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
kobostandards::check_input(data = data, questions = questionnaire, choices = "./input/choices.csv" ,samplingframe = sampling_frame,
analysisplan = analysisplan) %>% write.csv("check_input.csv")
View(check_input)
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
View(data)
weighted_results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
weighted_results_labeled <- lapply(weighted_results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = weighted_results_labeled, filename = "bio_food_shelter.csv")
library(parallel)
map_to_master_table(results_object = weighted_results_labeled, filename = "bio_food_shelter.csv")
map_to_master_table(results_object = weighted_results_labeled, filename = "./output/bio_food_shelter.csv")
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
library(hypegrammaR)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights)
View(result)
result %>% map_to_labeled(questionnaire) -> result_labeled
View(result_labeled)
data$food_source
str(data$food_source)
data <- read.csv(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights)
result %>% map_to_labeled(questionnaire) -> result_labeled
map_to_file(result_labeled$summary.statistic,"./output/summary_statistics.csv")
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights)
result %>% map_to_labeled(questionnaire) -> result_labeled
map_to_file(result_labeled$summary.statistic,"./output/summary_statistics.csv")
debugonce(map_to_result)
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights)
parameters <- list(dependent.var = dependent.var, independent.var = independent.var,
cluster.variable.name = cluster.variable.name, weighted = is.function(weighting),
case = case)
is.null(weighting)
is_valid_case_string(case)
design <- map_to_design(data = data, weighting_function = weighting,
cluster_variable_name = cluster.variable.name)
hypothesis.test.result <- map_to_hypothesis_test(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
summary.result <- map_to_summary_statistic(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
View(summary.result)
debugonce(map_to_design)
design <- map_to_design(data = data, weighting_function = weighting,
cluster_variable_name = cluster.variable.name)
is.null(cluster_variable_name)
cluster.ids <- as.formula(c("~1"))
is.null(weighting_function)
strata.weights <- weighting_function(data)
survey.design <- svydesign(data = data, ids = formula(cluster.ids),
strata = names(strata.weights), weights = as.vector(strata.weights),
nest = T)
return(survey.design)
View(survey.design)
result<-map_to_result(data = assessment_data,
dependent.var = "shelter_type",
independent.var =   "displacement_status",
case = case,
weighting = weights)
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights)
debugonce(map_to_result)
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights)
debugonce(map_to_summary_statistic)
parameters <- list(dependent.var = dependent.var, independent.var = independent.var,
cluster.variable.name = cluster.variable.name, weighted = is.function(weighting),
case = case)
design <- map_to_design(data = data, weighting_function = weighting,
cluster_variable_name = cluster.variable.name)
hypothesis.test.result <- map_to_hypothesis_test(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
summary.result <- map_to_summary_statistic(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
is_valid_case_string(case)
!is.null(questionnaire)
is.null(questionnaire)
!is.null(questionnaire)
dependent_is_select_multiple <- questionnaire$question_is_select_multiple(dependent.var)
dependent_is_select_multiple <- FALSE
case == "CASE_group_difference_categorical_categorical"
case
dependent_is_select_multiple
!dependent_is_select_multiple
summary_stat <- percent_with_confints_select_multiple_groups(dependent.var = dependent.var,
dependent.var.sm.cols = dependent.var.sm.cols,
independent.var = independent.var, design = design)
summary_stat <- percent_with_confints_select_one_groups(dependent.var = dependent.var,
independent.var = independent.var, design = design)
summary_stat <- percent_with_confints_select_one(dependent.var = dependent.var,
design = design)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
ls()
rm(list = ls())
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
View(questionnaire)
browseVignettes("koboquest")
View(questionnaire)
survey <-  read.csv("./input/survey.csv")
questionnaire$question_is_select_multiple(survey$name["food_source"])
View(survey)
questionnaire$question_is_select_multiple(survey$name["agriculture_production"])
questionnaire$question_is_select_one(survey$name["agriculture_production"])
questionnaire$question_is_select_one(survey$name["food_source])
questionnaire$question_is_select_one(survey$name["food_source]))
survey$type["mantika"]
survey$type[10]
questionnaire$question_is_select_one(survey$name["mantika"])
questionnaire$question_is_select_one(survey[11,"name"])
survey[33,"name"]
questionnaire$question_is_numeric(survey[33,"name"])
questionnaire$question_type(survey$name["food_source"])
survey$name["food_source"]
survey$name[11]
questionnaire$question_type(survey$name[11])
View(data)
debugonce(map_to_result)
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights)
design <- map_to_design(data = data, weighting_function = weighting,
cluster_variable_name = cluster.variable.name)
hypothesis.test.result <- map_to_hypothesis_test(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
rm(list = ls())
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights,
questionnaire = questionnaire)
result %>% map_to_labeled(questionnaire) -> result_labeled
map_to_file(result_labeled$summary.statistic,"./output/summary_statistics.csv")
debugonce(map_to_result)
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights,
questionnaire = questionnaire)
parameters <- list(dependent.var = dependent.var, independent.var = independent.var,
cluster.variable.name = cluster.variable.name, weighted = is.function(weighting),
case = case)
is_valid_case_string(case)
design <- map_to_design(data = data, weighting_function = weighting,
cluster_variable_name = cluster.variable.name)
hypothesis.test.result <- map_to_hypothesis_test(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
debugonce(map_to_summary_statistic)
summary.result <- map_to_summary_statistic(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
is_valid_case_string(case)
!is.null(questionnaire)
dependent_is_select_multiple <- questionnaire$question_is_select_multiple(dependent.var)
dependent_is_select_multiple
dependent_is_select_multiple
dependent_is_select_multiple <- FALSE
case
!dependent_is_select_multiple
summary_stat <- percent_with_confints_select_one(dependent.var = dependent.var,
design = design)
summary_stat
debugonce(map_to_result)
result<-map_to_result(data = data,
dependent.var = "mantika",
case = case,
weighting = weights,
questionnaire = questionnaire)
debugonce(map_to_summary_statistic)
parameters <- list(dependent.var = dependent.var, independent.var = independent.var,
cluster.variable.name = cluster.variable.name, weighted = is.function(weighting),
case = case)
design <- map_to_design(data = data, weighting_function = weighting,
cluster_variable_name = cluster.variable.name)
hypothesis.test.result <- map_to_hypothesis_test(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
summary.result <- map_to_summary_statistic(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
is_valid_case_string(case)
!is.null(questionnaire)
dependent_is_select_multiple <- questionnaire$question_is_select_multiple(dependent.var)
dependent_is_select_multiple
dependent_is_select_multiple <- FALSE
case
summary_stat <- percent_with_confints_select_one(dependent.var = dependent.var,
design = design)
View(summary_stat)
rm(list = ls())
rm(list = ls())
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = "./input/data.csv",
questions = "./input/survey.csv",
choices = "./input/choices.csv",
choices.label.column.to.use = "label::English (en)")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
case <- map_to_case(hypothesis.type = "direct_reporting",
dependent.var.type = "categorical")
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights,
questionnaire = questionnaire)
result %>% map_to_labeled(questionnaire) -> result_labeled
map_to_file(result_labeled$summary.statistic,"./output/summary_statistics.csv")
debugonce(map_to_result)
result<-map_to_result(data = data,
dependent.var = "food_source",
case = case,
weighting = weights,
questionnaire = questionnaire)
debugonce(map_to_summary_statistic)
parameters <- list(dependent.var = dependent.var, independent.var = independent.var,
cluster.variable.name = cluster.variable.name, weighted = is.function(weighting),
case = case)
design <- map_to_design(data = data, weighting_function = weighting,
cluster_variable_name = cluster.variable.name)
hypothesis.test.result <- map_to_hypothesis_test(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
summary.result <- map_to_summary_statistic(design = design,
dependent.var = dependent.var, independent.var = independent.var,
case = case, questionnaire = questionnaire)
