se = ((summary[2] - summary[3])/1.96)
se
str(se)
colnames(se)
colnames(se) <- "se"
se
((summary[2] - summary[3])/1.96) %>% colnames()
((summary[2] - summary[3])/1.96) %>% colnames()<-"se"
colnames(se) <- "se"
se
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/median.csv")
#source("analysisplan_factory.R")
source("summary_statistic.R")
#source("analysisplan_factory.R")
source("summary_statistics.R")
source("map_to_case.R")
source("map_to_result.R")
source("map_to_summary_statistic.R")
source("apply_analysis_plan.R")
rm(list = ls())
library(hypegrammaR)
library(parallel)
library(dplyr)
#source("analysisplan_factory.R")
source("summary_statistics.R")
source("map_to_case.R")
source("map_to_result.R")
source("map_to_summary_statistic.R")
source("apply_analysis_plan.R")
questions <- read.csv("./input/survey.csv", stringsAsFactors = F)
choices <- read.csv("./input/choices.csv", stringsAsFactors = F)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
View(analysisplan)
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
group_diff_case <- map_to_case(hypothesis.type = "group_difference",
dependent.var.type = "numerical",
independent.var.type = "categorical")
map_to_result(data = data,
dependent.var = "non_gvt_salary",
independent.var = "displacement_status",
case = group_diff_case,
weighting = weights,
questionnaire = questionnaire)
subdata <- subset(data, mantika_label=="Aljufra")
lookup <- unique(sampling_frame)
data <- merge(lookup, data, by='strata.names')
data$weights <- weights(data)
strat_design <- svydesign(id=~1, strata = names(strata.weights), weights = as.vector(strata.weights),
data = data, nest = T)
strata.weights <- weights(data)
strat_design <- svydesign(id=~1, strata = names(strata.weights), weights = as.vector(strata.weights),
data = data, nest = T)
Aljufra <- subset(strat_design, mantika_label=="Aljufra")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Aljufra, na.rm=T, quantiles=0.5, ci=T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Aljufra, na.rm=T, quantiles=0.5, ci=T)
debugonce(svyby)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Aljufra, na.rm=T, quantiles=0.5, ci=T)
UseMethod("svyby", design)
any(is.na(Aljufra$variables$non_gvt_salary))
svyby
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=F, se=ci)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=F, alpha=0.05)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=F)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T, alpha=0.05)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T, alpha=0.95)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T, alpha=0.05)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T, alpha=0.1)
svyquantile(~gvt_salary, design=strat_design, quantiles=0.5, na.rm=TRUE, ci=T, alpha=0.15)
x <- 1:10
y <- rnorm(10)
x
y
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
f <- approxfun(x, y)
curve(f(x), 0, 11, col = "green2")
points(x, y)
is.function(fc <- approxfun(x, y, method = "const")) # TRUE
curve(fc(x), 0, 10, col = "darkblue", add = TRUE)
## different extrapolation on left and right side :
plot(approxfun(x, y, rule = 2:1), 0, 11,
col = "tomato", add = TRUE, lty = 3, lwd = 2)
x <- c(2,2:4,4,4,5,5,7,7,7)
y <- c(1:6, 5:4, 3:1)
(amy <- approx(x, y, xout = x)$y) # warning, can be avoided by specifying 'ties=':
op <- options(warn=2) # warnings would be error
stopifnot(identical(amy, approx(x, y, xout = x, ties=mean)$y))
options(op) # revert
(ay  <- approx(x, y, xout = x, ties = "ordered")$y)
stopifnot(amy == c(1.5,1.5, 3, 5,5,5, 4.5,4.5, 2,2,2),
ay  == c(2, 2,    3, 6,6,6, 4, 4,    1,1,1))
approx(x, y, xout = x, ties = min)$y
approx(x, y, xout = x, ties = max)$y
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
map_to_result(data = data,
dependent.var = "non_gvt_salary",
independent.var = "displacement_status",
case = group_diff_case,
weighting = weights,
questionnaire = questionnaire)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Aljufra, na.rm=T, quantiles=0.5, ci=T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Aljufra, na.rm=T, quantiles=0.5, ci=T, method = "constant")
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
rm(list = ls())
library(hypegrammaR)
library(parallel)
library(dplyr)
#source("analysisplan_factory.R")
source("summary_statistics.R")
source("map_to_case.R")
source("map_to_result.R")
source("map_to_summary_statistic.R")
source("apply_analysis_plan.R")
questions <- read.csv("./input/survey.csv", stringsAsFactors = F)
choices <- read.csv("./input/choices.csv", stringsAsFactors = F)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
lookup <- unique(sampling_frame)
data <- merge(lookup, data, by='strata.names')
strat_design <- svydesign(ids=~1, strata = ~strata.names, fpc = ~population,
data = data, nest = T)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "linear")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
Ejdabia <- subset(strat_design, mantika_label=="Aljufra")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Aljufra, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
data$displacement_status["returnee"]<- "idp"
data$displacement_status["returnee"]
data$displacement_status
data[data$displacement_status=="returnee",]
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
data %>% filter(mantika_label=="Ejdabia") %>% select(displacement_status)
svyquantile(~non_gvt_salary, design=Ejdabia, quantiles=0.5, na.rm=TRUE)
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~sex_hoh, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~sex_hoh, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "linear")
svyby(~non_gvt_salary, ~sex_hoh, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "linear")
svyby(~non_gvt_salary, ~sex_hoh, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "linear")
unique(data$displacement_status)
analysisplan2 <- analysisplan_expand_repeat(analysisplan = analysisplan,data = data)
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
analysisplan <- read.csv("./input/analysisplan.csv", stringsAsFactors = F)
analysisplan2 <- analysisplan_expand_repeat(analysisplan = analysisplan,data = data)
View(analysisplan)
View(analysisplan2)
strat_design$variables$strata.names
strat_design$variables
strat_design$variables["displacement_status"]
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = strat_design)
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
Ejdabia$variables$displacement_status
unique(Ejdabia$variables$displacement_status)
Ejdabia$variables$displacement_status[Ejdabia$variables$non_gvt_salary]
Ejdabia$variables$non_gvt_salary
Ejdabia$variables$displacement_status[Ejdabia$variables$non_gvt_salary]
Ejdabia$variables$displacement_status[!is.na(Ejdabia$variables$non_gvt_salary)]
unique(Ejdabia$variables$displacement_status[!is.na(Ejdabia$variables$non_gvt_salary)])
unique(strat_design$variables$displacement_status[!is.na(Ejdabia$variables$non_gvt_salary)])
strat_design$variables
strat_design$variables$displacement_status
strat_design$variables["displacement_status"]
strat_design$variables$displacement_status
strat_design$variables["displacement_status"]
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
median_with_confints_groups
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
strat_design$variables["displacement_status"]
strat_design$variables["displacement_status"][!is.na(Ejdabia$variables$non_gvt_salary)])
strat_design$variables["displacement_status"][!is.na(strat_design$variables$non_gvt_salary)]
strat_design$variables["displacement_status"][!is.na(strat_design$variables["displacement_status"])]
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
map_to_design
unique(strat_design$variables$displacement_status[!is.na(Ejdabia$variables$non_gvt_salary)])
strat_design$variables["displacement_status"][!is.na(strat_design$variables["displacement_status"])]
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
strat_design$variables["displacement_status"][!is.na(strat_design$variables["displacement_status"])]
Ejdabia$variables["displacement_status"]
Ejdabia$variables$displacement_status
is.na(Ejdabia$variables$non_gvt_salary)
Ejdabia$variables$displacement_status[!is.na(Ejdabia$variables$non_gvt_salary)]
approxfun
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "linear")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "consatnt")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "consatnt")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "consatant")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T, method = "constant")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, interval.type="quantile", method = "constant")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, interval.type="quantile", method = "constant",ci=T)
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "linear")
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "linear"n ci=T)
svyby(~non_gvt_salary, ~same_baladiya_prior_2011, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "linear", ci=T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "linear", ci=T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "constant", ci=T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "constant", ci=T, f=1)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "constant", ci=T, f=0)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, method = "constant", ci=T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T,method = "constant", rule =1)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T,method = "constant", f =1)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T,method = "constant", rule =2)
2
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T,method = "constant", rule =2)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T,method = "constant", rule =1)
Ejdabia$variables$displacement_status[!is.na(Ejdabia$variables$non_gvt_salary)]
subset(strat_design, mantika_label=="Ejdabia")
subset(strat_design, mantika_label=="Ejdabia", !non_gvt_salary %>% c(NA))
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia", !non_gvt_salary %>% c(NA))
Ejdabia
Ejdabia$variables$displacement_status
non_gvt_salary %>% c(NA)
data$non_gvt_salary %in% c(NA)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia", !non_gvt_salary %in% c(NA))
Ejdabia$variables$displacement_status
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia" & !non_gvt_salary %in% c(NA))
Ejdabia$variables$displacement_status
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = strat_design)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
Ejdabia <- subset(strat_design, !non_gvt_salary %in% c(NA))
Ejdabia$variables$displacement_status
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
Ejdabia <- subset(Ejdabia, !non_gvt_salary %in% c(NA))
Ejdabia$variables$displacement_status
debugonce(median_with_confints_groups)
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
debugonce(median_with_confints_groups)
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
sanitised <-datasanitation_design(design,dependent.var,independent.var,
hypegrammaR:::datasanitation_summary_statistics_mean_groups)
!sanitised$success
formula_string <- paste0("~as.numeric(", dependent.var, ")")
formula_string
by <- paste0("~", independent.var, sep = "")
by
design <- subset(design,!dependent.var %in% c(NA))
design$variables$displacement_status
dependent.var
dependent.var %in% c(NA)
dependent.var
as.character("non_gvt_salary")
formula("non_gvt_salary")
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia <- subset(Ejdabia, !"non_gvt_salary" %in% c(NA))
Ejdabia$variables$displacement_status
as.numeric("non_gvt_salary")
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia$variables$displacement_status
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
debugonce(median_with_confints_groups)
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
sanitised <-datasanitation_design(design,dependent.var,independent.var,
hypegrammaR:::datasanitation_summary_statistics_mean_groups)
!sanitised$success
formula_string <- paste0("~as.numeric(", dependent.var, ")")
by <- paste0("~", independent.var, sep = "")
formula_string
by
design <- subset(design,!noquote(dependent.var) %in% c(NA))
noquote(dependent.var)
design$variables$displacement_status
noquote(dependent.var) %in% c(NA)
dependent.var
!noquote(dependent.var) %in% c(NA)
noquote(dependent.var) %in% c(NA)
dependent.var
Ejdabia <- subset(Ejdabia, !non_gvt_salary %in% c(NA))
Ejdabia$variables$displacement_status
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
paste0("non_gvt_salary")
subset.by <-paste0("non_gvt_salary")
formula(subset.by)
subset.by
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia$variables$displacement_status
Ejdabia <- subset(Ejdabia, !formula(subset.by) %in% c(NA))
["non_gvt_salary"]
Ejdabia <- subset(Ejdabia, !non_gvt_salary %in% c(NA))
Ejdabia$variables$displacement_status
str(Ejdabia)
Ejdabia$variables[,"non_gvt_salary"]
Ejdabia <- Ejdabia$variables[,"non_gvt_salary"]
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia <- subset(Ejdabia, !non_gvt_salary %in% c(NA))
Ejdabia$variables <- Ejdabia$variables[,"non_gvt_salary"]
Ejdabia$strata
Ejdabia$variables
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia$variables[,"non_gvt_salary"]
Ejdabia <- subset(Ejdabia, !non_gvt_salary %in% c(NA))
Ejdabia$variables[,"non_gvt_salary"]
Ejdabia$variables$displacement_status
paste0("as.numeric(", dependent.var, ")")
paste0("as.numeric(", "non_gvt_salary", ")")
subset.by <- paste0("as.numeric(", "non_gvt_salary", ")")
formula(subset.by)
Ejdabia <- subset(Ejdabia, formula(subset.by) %in% c(NA))
Ejdabia <- subset(Ejdabia, subset.by %in% c(NA))
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
subset.by <- paste0("as.numeric(", "non_gvt_salary", ")")
Ejdabia <- subset(Ejdabia, subset.by %in% c(NA))
Ejdabia$variables$displacement_status
subset.by
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia <- subset(x = Ejdabia, subset =formula(subset.by) %in% c(NA))
Ejdabia <- subset(x = Ejdabia, subset =!subset.by %in% c(NA))
Ejdabia$variables$strata.names
Ejdabia$variables$displacement_status
subset.by
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia <- subset(x = Ejdabia, subset =!non_gvt_salary %in% c(NA))
Ejdabia$variables$displacement_status
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T)
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = strat_design)
Ejdabia <- subset(x = strat_design, subset =!non_gvt_salary %in% c(NA))
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = Ejdabia, na.rm=T, quantiles=0.5, ci=T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = strat_design, na.rm=T, quantiles=0.5, ci=T)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia$variables["non_gvt_salary"]
Ejdabia <- subset(x = Ejdabia, Ejdabia$variables["non_gvt_salary"] %in% c(NA))
Ejdabia$variables$displacement_status
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia$variables["non_gvt_salary"]
Ejdabia$variables["non_gvt_salary"] %in% c(NA)
str(Ejdabia$variables["non_gvt_salary"])
str(Ejdabia$variables$displacement_status)
str(Ejdabia$variables["non_gvt_salary"])
Ejdabia$variables[,"non_gvt_salary"]
str(Ejdabia$variables[,"non_gvt_salary"])
str(Ejdabia$variables$non_gvt_salary)
Ejdabia$variables[,"non_gvt_salary"] %in% c(NA)
Ejdabia <- subset(x = Ejdabia, Ejdabia$variables[,"non_gvt_salary"] %in% c(NA))
Ejdabia$variables$displacement_status
Ejdabia <- subset(x = Ejdabia, Ejdabia$variables[,"non_gvt_salary"] %in% c(NA))
Ejdabia$variables$displacement_status
Ejdabia$variables[,"non_gvt_salary"] %in% c(NA)
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
Ejdabia$variables[,"non_gvt_salary"] %in% c(NA)
Ejdabia <- subset(x = Ejdabia, !Ejdabia$variables[,"non_gvt_salary"] %in% c(NA))
Ejdabia$variables$displacement_status
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
source('C:/Users/REACH/Dropbox/2. Research projects/3. Humanitarian Pillar/1. MSNA/3. MSNA 2019/1. Libya MSNA/7. Analysis/lby_msna2019/summary_statistics.R')
Ejdabia <- subset(strat_design, mantika_label=="Ejdabia")
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = strat_design)
median_with_confints_groups(dependent.var = "non_gvt_salary", independent.var = "displacement_status",design = Ejdabia)
rm(list = ls())
library(hypegrammaR)
library(parallel)
library(dplyr)
#source("analysisplan_factory.R")
source("summary_statistics.R")
source("map_to_case.R")
source("map_to_result.R")
source("map_to_summary_statistic.R")
source("apply_analysis_plan.R")
questions <- read.csv("./input/survey.csv", stringsAsFactors = F)
choices <- read.csv("./input/choices.csv", stringsAsFactors = F)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/preliminary_analysis.csv")
rm(list = ls())
library(hypegrammaR)
library(parallel)
library(dplyr)
#source("analysisplan_factory.R")
source("summary_statistics.R")
source("map_to_case.R")
source("map_to_result.R")
source("map_to_summary_statistic.R")
source("apply_analysis_plan.R")
questions <- read.csv("./input/survey.csv", stringsAsFactors = F)
choices <- read.csv("./input/choices.csv", stringsAsFactors = F)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/preliminary_analysis.csv")
strat_design <- svydesign(ids=~1, strata = ~strata.names, fpc = ~population,
data = data, nest = T)
lookup <- unique(sampling_frame)
data <- merge(lookup, data, by='strata.names')
strat_design <- svydesign(ids=~1, strata = ~strata.names, fpc = ~population,
data = data, nest = T)
svyby(~non_gvt_salary, ~displacement_status, svyquantile, design = strat_design, na.rm=T, quantiles=0.5, ci=T)
median_with_confints_groups(dependent.var ="non_gvt_salary",independent.var ="displacement_status",design = strat_design)
rm(list = ls())
library(hypegrammaR)
library(parallel)
library(dplyr)
source("../functions/analysisplan_factory.R")
getwd()
rm(list = ls())
library(hypegrammaR)
library(parallel)
library(dplyr)
source("./functions/analysisplan_factory.R")
source("./functions/summary_statistics.R")
source("./functions/map_to_case.R")
source("./functions/map_to_result.R")
source("./functions/map_to_summary_statistic.R")
source("./functions/apply_analysis_plan.R")
questions <- read.csv("./input/survey.csv", stringsAsFactors = F)
choices <- read.csv("./input/choices.csv", stringsAsFactors = F)
data <- load_data(file = "./input/data.csv")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label::English (en)")
analysisplan <- load_analysisplan(file = "./input/analysisplan.csv")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
results <- from_analysisplan_map_to_output(data = data,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire)
labeled_results <- lapply(results$results, map_to_labeled,questionnaire)
map_to_master_table(results_object = labeled_results, filename = "./output/preliminary_analysis_overall_bydisplacemen_tstatus.csv")
